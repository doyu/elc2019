> TinyML as-a-Service: What is it and what does it mean for the IoT
> Edge?

TinyML as-a-Serviceとは？ IoTエッジに対してどのような意味を持つのか？

> The power of machine learning can have a remarkable technological
> impact at the core of constrained and embedded IoT. Yet various
> technological barriers have so far made it challenging to realize the
> full value of ML-driven IoT at the edge. Could tiny machine learning
> provide a solution? In this Ericsson Research series, we explore the
> possibilities and challenges of machine learning for IoT and introduce
> the concept of TinyML as-a-service. Read on.

機械学習(ML)は組み込みIoT分野において、大きな影響を及ぼす可能性があり
ます。MLによってもたらされる価値をIoTエッジにおいて実現するには様々な
技術的課題が立ちはだかっています。TinyMLはそのソリューションとなり得る
でしょうか？このEricsson Researchの連載で、IoTにおける機械学習の可能性
と問題点を探り、そしてTinyML as-a-Serviceのコンセプトを紹介していきた
いと思います。

> Machine Learning (ML) has profoundly revolutionized and enhanced the
> last decade of computer technologies. By extension, it has impacted
> several application domains and industries ranging across medical,
> automotive, smart cities, smart factories, business, finance, and
> more. Remarkable research efforts are still ongoing today, across both
> industry and academia, to bring the full advantage of the ever-growing
> number of ML algorithms. Here, the aim is to make computing machines,
> of every size factor, smarter and able to deliver sophisticated and
> reliable services.

機械学習(ML)はこの10年間にコンピュータ技術をかなり変革しました。更に医
療、自動車、スマート・シティ、スマート・ファクトリ、エンタープライズ、
金融などを含む派生分野や産業にまで影響を及ぼしました。今日においても、
産業界と学会の両面にわたり、これまでにわたり増加してきた機械学習アルゴ
リズムを利用するため、著しい研究の努力は依然として続けられています。こ
こでの目的は、すべての形態の計算機械をよりスマートにし、洗練されかつ信
頼性のあるサービスを提供できるようにすることです。

> Machine learning and IoT

機械学習とIoT

> ML applied in the context of the Internet of Things (IoT) is without
> doubt an application domain that has attracted a large amount of
> interest from across the enterprise, industrial and research
> communities. Today, researchers are working extensively to advance
> existing ML-driven IoT in order to boost the quality of experience for
> users of smart devices and improvement of industrial processes.

機械学習をIoTのコンテキストに適用するということは、確かに産業界および
研究分野において多大な興味を引き起こす分野です。今日、研究者はスマート
デバイスのユーザー体験と産業プロセスの改善のために既存のIoT機械学習を
進展させようと非常に励んでいます。

> However, it is worth highlighting how there is not a formal and
> uniform view on what de facto ML in IoT means, and this has led to
> multiple opportunities and interpretations. In our view, taking
> advantage of intelligent algorithms in the IoT context translates to
> also having the possibility to equip IoT end-devices (such as sensors,
> actuators and micro-controllers) with functionalities capable of
> unleashing the power of ML algorithms on the IoT device itself. This
> thus extends the use of ML in IoT beyond in the cloud and more capable
> devices running e.g. Linux.

しかし、ここで言っておきたいのは、
"何がデファクトの組み込みIoT機械学習なのか"に対しての
公式な見解や単一な見解は存在しないということです。
これには様々は解釈が存在します。

我々の見解では、
IoTにおけるインテリジェントなアルゴリズム利用とは、IoTエンドデバイス
(センサーやアクチュエータといったマイクロコントーラ)での利用も意味しま
す。それは、IoTデバイス上でMLアルゴリズムのパワーを解き放ちます。これ
は従来のクラウドやLinuxが動作するデバイスを超えて、IoTにおける機械学習
を実現するということです。


> In most cases, many consider ML in IoT as having the possibility to
> provide ML inference capabilities to devices similar to the well-known
> Single-Board Computer "Raspberry Pi", with the latter taking the role
> of IoT device.  The question is then, how can we put ML algorithms on
> constrained devices that are 32-bit MCUs and not capable of running an
> OS like Linux.

ほとんどの場合、IoT機械学習とは、
有名なラズベリーパイといったシングルボード・コンピュータ上にML推論を載
せることと考えるかもしれませんが、
ここでの問題は、どうすればLinuxが動作しないような非力な32bitのマイクロ
コントローラ上にMLアルゴズムを載せることが可能か？ということになります。

> In order to answer, we first need to come up with a clear idea of what
> can be defined as a constrained IoT device. In the last decades of
> IoT-related research, there have been countless attempts to converge
> towards a common and coherent definition. To our extent, we accept the
> definition and characterization given by the Internet Engineering Task
> Force (IETF) through the RFC 7228bis. We believe that we must consider
> and operate within the world of embedded systems to be able to talk
> about IoT devices at the very deep edge. Embedded can be considered a
> synonym of hardware and software constraints. This, in turn, can be
> considered an antonym of Cloud and Edge – different entities that, in
> this game, can feature big and somehow "unlimited" resources. Embedded
> can also be viewed as embedding the computing, sensing and actuation
> in everyday objects and environments, like a soil sensor in
> agriculture or an appliance in a building.

これに対して回答するために、まずはじめに"constrained IoT device"の定義
を明確にする必要があります。過去10年間のIoT関連の研究でこの共通認識を
形成するためのに数え切れないほどの試みがなされました。我々はIETF RFC
7228bisでの定義を取り入れます。我々は組み込みの世界のIoTのもっとも深い
末端にあるデバイスを考慮する必要があると考えます。"組み込み"とはハード
ウェアとソフトウェアの制約と同義と考えることができます。かわって、これ
はクラウドやエッジと対称なものと考えれます。クラウドやエッジは強大で無
尽蔵なりソースを持ちえます。エンベッディドとは、計算装置、センサー、ア
クチュエータを日常的はデバイスや環境に"組み込む"ということです。例えば、
土壌センサやビルの備え付け装置など。

> What is TinyML as-a-Service?

"TinyML as-a-Service"とは？

> Using this explicit definition of a constrained IoT device as a
> starting point, it is thus crucial to characterize the distinction
> between "serving" machine learning to IoT devices, and "developing"
> machine learning within IoT devices.

この"constrained IoT device"の明確な定義を使うことから始めます。機械学
習をIoTデバイス向けに"提供(serving)"することと、機械学習をIoTデバイス
用に"開発(developing)"することを分けて考えることが必要です。

> In the first case, all the ML-related tasks are “outsourced” to the
> Edge and Cloud, meaning that an IoT device is somehow "passively"
> waiting to receive the rendered ML model algorithm elaboration. In the
> second case, conversely, an IoT device concretely takes part in the
> execution of intelligent services. This is defined as TinyML
> as-a-Service, regardless of the more limited resources compared to
> cloud and edge.

最初のケースでは、すべての機械学習関連のタスクはエッジやクラウドへアウ
トソースされます。つまりIoTデバイスはMLアルゴリズムの出力を待つという
意味で受け身なのです。逆に第２のケースでは、IoTデバイスは実際にインテ
リジェント・サービスに参加します。クラウドやエッジと比較して非力なりソー
スかどうかにかかわらず、これがTinyML as-a-Serviceと定義されます。

> Figure 1 below illustrates the overlap of the different technology
> areas and enablers, as well as providing a clear overview of our
> research focus. From a technological point of view, we can notice how
> there are several overlapping areas which represent the common ground
> between technological areas and technological enablers. As an example,
> the world of embedded Linux can be considered a rally point between
> "Linux" technologies and "Constrained IoT", thus also acknowledging
> that IoT capabilities stretches across the device-edge-cloud realms.
> "TinyML" represents the connecting point between "IoT devices" and
> "ML". It is worth highlighting how TinyML, however it aims to bring ML
> into the embedded world, does not exclusively overlap with
> technological enablers such as Linux. This feature represents a
> crucial aspect of our research area and will be extensively clarified
> in the upcoming articles.

以下のFigure 1はそれぞれ違った技術分野や要素の重なりを示しています。ま
た我々の研究のフォーカスも示しています。技術的観点から、いくつかの重なっ
た領域がある共通認識を提示していることがわかります。例えば、"Linux"と
"IoT"の重なりが"組み込みLinux"です。IoTはデバイス-エッジ-クラウドにま
たがっています。"TinyML"は"IoT"と"ML"の重なりです。さらにTinyMLはLinux
を含まずにMLを組み込みの世界へ導入することを意味します。これは我々の研
究の重要な側面を表しています。今後の続編でさらに明らかになっていきます。


> The challenges of TinyML as-a-Service

TinyML as-a-Serviceの課題

> The difference between "serving" and "developing" ML in IoT devices
> presents some significant technical challenges. Lately, efforts to
> focus on the “developing” technologies have been steadily growing in
> R&D, not only at Ericsson but also across other key technology
> players. The aim is to make it easier and straightforward.

IoTデバイスに対する機械学習の"提供(serving)"と"開発(developing)"の差は
大きな技術的課題として現れます。IoTデバイスに対する機械学習の"開発
(developing)"の労力は研究開発において増大してきています。これは
Ericssonに限った話ではなく、業界の他の主要なテクノロジー会社においても
同様です。これを用意かつ簡単にする必要があります。

> To this extent, there are three key challenges which we explore:

これに関して、以下の３課題を吟味します。

> 1. the technical challenges within edge computing and how it cannot be
> applied to solve all problems

1. エッジ・コンピューティングの技術的課題

> 2. the relevance of technological
> differences between web-based and embedded worlds, especially from
> deployment and execution perspectives

Webと組み込みの技術的差異の妥当性。特にデプロイと実行の観点から。

> 3. the demand which ML places on
> computational resources for delivering an accurate and reliable experience

精度と信頼のために機械学習が求める計算リソース


> In this blog series, we introduce and explain how our TinyML
> as-a-Service approach can bridge the worlds of constrained IoT and ML
> together.  In doing so, we share the core of the TinyML as-a-Service
> approach, detail the reasons why it is not so straightforward to
> execute plain ML tasks within embedded IoT, and present possible
> additional approaches that, along with TinyML as-a-service, could
> allow to quickly reach a fully ML-driven IoT world.

このシリーズで
我々は
TinyML as-a-Serviceがどのように"組み込みIoT"と機械学習をつなげることが
できるか紹介し説明します。TinyML as-a-Serviceのポイントを紹介し、なぜ
機械学習を組み込みIoTに持ち込むのが容易でないのかを詳解します。そして
TinyML as-a-Serviceとともに"組み込みIoT機械学習"を可能する方法を示しま
す。

> Stay tuned in the upcoming weeks to discover more about the
> fascinating fusion between machine learning and IoT at the edge!

機械学習とエッジIoTの魅惑的な融合を発見するために楽しみにお待ちくださ
い。

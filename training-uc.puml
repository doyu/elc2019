@startuml
title Training:\nParameter Server (PS)

file "trained\nmodel" as trained_model
collections data

data -[#blue,bold]> (Server\n<<model>>)
(Server\n<<model>>) -> (Worker1\n<<model>>) : dispatch
(Server\n<<model>>) -> (Worker2\n<<model>>)
(Server\n<<model>>) -> (Worker3\n<<model>>)

(Worker1\n<<model>>) --> (Server\n<<model>>) : return
(Worker2\n<<model>>) --> (Server\n<<model>>)
(Worker3\n<<model>>) --> (Server\n<<model>>)


(Server\n<<model>>) ---> trained_model : generating

newpage
title Training:\nFederated Learning (FL)

file "trained\nmodel" as trained_model
collections "local\ndata1" as data1
collections "local\ndata2" as data2
collections "local\ndata3" as data3

(Server\n<<model>>) -> (Worker1\n<<model>>) : dispatch
(Server\n<<model>>) -> (Worker2\n<<model>>)
(Server\n<<model>>) -> (Worker3\n<<model>>)

(Worker1\n<<model>>) --> (Server\n<<model>>) : return
(Worker2\n<<model>>) --> (Server\n<<model>>)
(Worker3\n<<model>>) --> (Server\n<<model>>)

data1 -[#blue,bold]> (Worker1\n<<model>>)
data2 -[#blue,bold]> (Worker2\n<<model>>)
data3 -[#blue,bold]> (Worker3\n<<model>>)

(Server\n<<model>>) ---> trained_model : generating

newpage
title Training:\nFederated Learning (FL)

cloud Edge {
        (Server\n<<model>>)
}

rectangle "on-premises1" {
        collections "local\ndata1" as data1
        (Worker1\n<<model>>)
}
rectangle "on-premises2" {
        collections "local\ndata2" as data2
        (Worker2\n<<model>>)
}
rectangle "on-premises3" {
        collections "local\ndata3" as data3
        (Worker3\n<<model>>)
}

(Server\n<<model>>) -down-> (Worker1\n<<model>>) : dispatch
(Server\n<<model>>) -down-> (Worker2\n<<model>>)
(Server\n<<model>>) -down-> (Worker3\n<<model>>)

(Worker1\n<<model>>) -up-> (Server\n<<model>>) : return
(Worker2\n<<model>>) -up-> (Server\n<<model>>)
(Worker3\n<<model>>) -up-> (Server\n<<model>>)

data1 -[#blue,bold]> (Worker1\n<<model>>)
data2 -[#blue,bold]> (Worker2\n<<model>>)
data3 -[#blue,bold]> (Worker3\n<<model>>)

file "trained\nmodel" as trained_model
(Server\n<<model>>) ---> trained_model : generating

newpage
title Training:\nFL on KVM

rectangle KVM {

cloud Edge {
        (Server\n<<model>>)
}

rectangle "on-premises1" {
        collections "local\ndata1" as data1
        (Worker1\n<<model>>)
}
rectangle "on-premises2" {
        collections "local\ndata2" as data2
        (Worker2\n<<model>>)
}
rectangle "on-premises3" {
        collections "local\ndata3" as data3
        (Worker3\n<<model>>)
}

(Server\n<<model>>) -down-> (Worker1\n<<model>>) : dispatch
(Server\n<<model>>) -down-> (Worker2\n<<model>>)
(Server\n<<model>>) -down-> (Worker3\n<<model>>)

(Worker1\n<<model>>) -up-> (Server\n<<model>>) : return
(Worker2\n<<model>>) -up-> (Server\n<<model>>)
(Worker3\n<<model>>) -up-> (Server\n<<model>>)

data1 -> (Worker1\n<<model>>)
data2 -> (Worker2\n<<model>>)
data3 -> (Worker3\n<<model>>)

file "trained\nmodel" as trained_model
(Server\n<<model>>) ---> trained_model : generating

(Server\n<<model>>) .. (/dev/tap10\n192.168.0.10)
(Worker1\n<<model>>) .. (/dev/tap1\n192.168.0.1)
(Worker2\n<<model>>) .. (/dev/tap2\n192.168.0.2)
(Worker3\n<<model>>) .. (/dev/tap3\n192.168.0.3)

(/dev/tap1\n192.168.0.1)..(br0\n192.168.0.100)
(/dev/tap2\n192.168.0.2)..(br0\n192.168.0.100)
(/dev/tap3\n192.168.0.3)..(br0\n192.168.0.100)
(/dev/tap10\n192.168.0.10)..(br0\n192.168.0.100)

}
(br0\n192.168.0.100)..(eth0)


@enduml
